name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build release
      run: cargo build --release --verbose

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        echo "Setting up Windows build environment..."
        echo "Using vendored OpenSSL for Windows builds..."
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build
      run: cargo build --release
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: solana-vanity-wallet-${{ matrix.os }}
        path: |
          target/release/solana-vanity-wallet*
        if-no-files-found: error

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
      
    - name: Check for new vulnerabilities (strict)
      run: cargo audit --deny warnings --ignore RUSTSEC-2024-0344 --ignore RUSTSEC-2022-0093 --ignore RUSTSEC-2024-0375 --ignore RUSTSEC-2024-0388 --ignore RUSTSEC-2024-0436 --ignore RUSTSEC-2021-0145
      
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build release
      run: cargo build --release
    
    - name: Test CLI help
      run: ./target/release/solana-vanity-wallet --help
    
    - name: Test invalid prefix handling
      run: |
        if ./target/release/solana-vanity-wallet "0" 2>&1 | grep -q "Invalid prefix"; then
          echo "‚úÖ Invalid prefix detection works"
        else
          echo "‚ùå Invalid prefix detection failed"
          exit 1
        fi
    
    - name: Test JSON output format
      run: |
        timeout 10s ./target/release/solana-vanity-wallet Z --format json || echo "JSON format test completed"
    
    - name: Test mnemonic mode
      run: |
        timeout 10s ./target/release/solana-vanity-wallet Z --with-mnemonic || echo "Mnemonic mode test completed"
    
    - name: Verify output directory creation
      run: |
        timeout 10s ./target/release/solana-vanity-wallet Z || echo "Output directory test completed"
        ls -la output/ || echo "Output directory will be created on successful generation"
        
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build optimized release
      run: cargo build --release
    
    - name: Compare fast vs mnemonic mode performance
      run: |
        echo "üöÄ Testing fast mode performance..."
        timeout 30s ./target/release/solana-vanity-wallet A 2>&1 | head -20 || echo "Fast mode test completed"
        
        echo "üêå Testing mnemonic mode performance..."
        timeout 30s ./target/release/solana-vanity-wallet A --with-mnemonic 2>&1 | head -20 || echo "Mnemonic mode test completed"
        
  windows-build:
    name: Windows Build
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Install OpenSSL
      run: |
        echo "Installing OpenSSL via vcpkg..."
        vcpkg integrate install
        vcpkg install openssl:x64-windows-static
        
    - name: Setup OpenSSL Environment
      run: |
        echo "Setting up OpenSSL environment variables..."
        $vcpkg_root = "C:\vcpkg"
        echo "OPENSSL_DIR=$vcpkg_root\installed\x64-windows-static" >> $env:GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$vcpkg_root\installed\x64-windows-static\lib" >> $env:GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$vcpkg_root\installed\x64-windows-static\include" >> $env:GITHUB_ENV
        echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
        echo "VCPKG_ROOT=$vcpkg_root" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=0" >> $env:GITHUB_ENV
        
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Verify OpenSSL installation
      run: |
        echo "Checking OpenSSL installation..."
        echo "OPENSSL_DIR=$env:OPENSSL_DIR"
        echo "OPENSSL_LIB_DIR=$env:OPENSSL_LIB_DIR"
        echo "OPENSSL_INCLUDE_DIR=$env:OPENSSL_INCLUDE_DIR"
        echo "OPENSSL_STATIC=$env:OPENSSL_STATIC"
        if (Test-Path "$env:OPENSSL_LIB_DIR\libssl.lib") {
          echo "‚úÖ OpenSSL libraries found"
        } else {
          echo "‚ùå OpenSSL libraries not found"
          ls "$env:OPENSSL_LIB_DIR"
        }
        
    - name: Build debug
      run: |
        echo "Building in debug mode..."
        cargo build --verbose
        
    - name: Run tests
      run: cargo test --verbose
      
    - name: Build release
      run: cargo build --release --verbose
      
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: solana-vanity-wallet-windows
        path: target/release/solana-vanity-wallet.exe
        if-no-files-found: error
